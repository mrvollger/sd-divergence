import os
import sys
import math
import pandas as pd
from snakemake.utils import min_version


min_version("6.0")
shell.prefix("set -eo pipefail; ")
SDIR = os.path.realpath(os.path.dirname(srcdir("Snakefile")))

tbl = pd.read_csv(config["manifest"], sep="\t")
tbl.set_index("sample", inplace=True)
config["sm"] = list(tbl.index)

fai = f"{config['ref']}.fai"
assert os.path.exists(fai), f"{fai} not found"

# df.fai = pd.read_csv(fai,sep="\t", header=None)


TEMP_DIR = config.pop("tempdir", "temp")
if TEMP_DIR != "temp":
    if os.path.exists("temp"):
        if os.path.islink("temp") and os.path.realpath("temp") == os.path.realpath(
            TEMP_DIR
        ):
            print("The temp dir has already been linked.")
        else:
            sys.exit("temp/ already in use, please move it before running.")
    else:
        shell("ln -s {TEMP_DIR} temp")


assert "SD" in config["annotation_files"].keys(), "SD annotation not found"
assert "Unique" in config["annotation_files"].keys(), "SD annotation not found"


wildcard_constraints:
    sm="|".join(tbl.index),
    dist="|".join(config["distance_files"].keys()),
    anno="|".join(config["annotation_files"].keys()),


include: "rules/regions.smk"
include: "rules/windows.smk"
include: "rules/snv.smk"
include: "rules/distance.smk"
include: "rules/tables.smk"
include: "rules/plots.smk"


rule all:
    input:
        expand(rules.make_summary_table_per_haplotype.output, sm=tbl.index, h=[1, 2]),
        rules.small_snv.output,
        annotation_sizes_wide=rules.annotation_sizes_wide.output,
        uncallable=rules.uncallable_windows.output,
        filtered_sv_pop_snv=expand(
            rules.merge_filtered_snv_by_syntenic.output, sm=tbl.index
        ),
        windows=rules.distance_windows.output,
        snv_table=rules.make_summary_table.output,
        plots=rules.plots.input,
        r_data=rules.make_r_data.output,
